// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  name              String
  email             String    @unique
  emailVerified     DateTime?
  hashedPassword    String?
  salt              String?
  password          String?         // Optional for OAuth users
  provider          AuthProvider    @default(CREDENTIALS)  // Enum for OAuth providers
  providerId        String?         // Stores the provider's user ID for OAuth users
  title             String
  location          String
  bio               String
  profileImageUrl   String?
  aiGeneratedTagline String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  image             String?
  
  // Relations
  experiences       Experience[]
  education         Education[]
  skills            Skill[]
  certifications    Certification[]
  projects          Project[]
  socialLinks       SocialLink[]
  aiSuggestions     AISuggestion[]
  accounts          Account[]
  sessions          Session[]
  
  @@map("users")
}

model Experience {
  id               String    @id @default(cuid())
  position         String
  company          String
  location         String?
  startDate        DateTime
  endDate          DateTime?
  description      String
  isCurrentPosition Boolean  @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  @@index([userId])
  @@index([startDate])
}

model Education {
  id                String    @id @default(cuid())
  institution       String
  institutionLogoUrl String?
  degree            String
  fieldOfStudy      String
  startYear         Int
  endYear           Int
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
}

model Skill {
  id               String    @id @default(cuid())
  name             String
  category         String?
  proficiencyLevel Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  @@index([userId])
  @@index([category])
}

model Certification {
  id             String    @id @default(cuid())
  name           String
  issuer         String
  issueDate      DateTime
  expirationDate DateTime?
  credentialUrl  String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId])
}

model Project {
  id               String    @id @default(cuid())
  title            String
  description      String
  technologies     String[]
  category         String
  imageUrl         String?
  projectUrl       String?
  githubUrl        String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model SocialLink {
  id               String    @id @default(cuid())
  platform         String
  url              String
  username         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model AISuggestion {
  id               String    @id @default(cuid())
  targetType       String
  targetId         String?
  suggestion       String
  status           String    @default("pending")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

enum AuthProvider {
  CREDENTIALS
  GOOGLE
  LINKEDIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}